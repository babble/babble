= Welcome to Ruby on Babble

This documentation covers the Ruby code that ships with Babble, the 10gen
cloud computing application server. For more information about the Babble app
server and Mongo database, see the 10gen wiki (http://www.10gen.com/wiki) and
developer documentation (http://www.10gen.com/wiki/DevDocumentation).

Most of the code consists of adapters to help you use Mongo and GridFS and let
you run Rails apps on Babble. You can also run non-Rails Ruby code, either
using XGen::Mongo::Base for your models or using the Mongo database API
directly to store raw data.

This document assumes you have read the
Babble[http://www.10gen.com/wiki/appserver] and
Mongo[http://www.10gen.com/wiki/db] documentation.


== The Babble Object Model

Code running on Babble can be multi-language. Code in any language can call
code in any other languge that Babble supports. You can do this from Ruby by
calling functions or by requiring or loading files that are written in a
different language.

Objects that come into Ruby from another language are subclasses of JSObject,
which is in turn a subclass of Hash. JSObject adds a few things to Hash (aside
from the wrapper methods needed to let Ruby "talk" to the other object).

* All keys are also exposed as methods. For example, if foo is a JSObject then
  foo['bar'] and foo.bar are the same, as are foo['bar'] = 42 and foo.bar = 42.

* JSObjects may have functions, which are also stored within the hash. You can
  call the function stored at foo['some_func'] by calling it like a normal
  Ruby function foo.some_func().

Ruby can in turn send objects to other languages (for example, by calling a
JSObject function and providing arguments or a block).

* Blocks get turned into JSFunction objects, which means that other languages
  can call Ruby blocks.

* Classes get turned into JSObject constructor functions.

Ruby classes can create instances of and subclass JavaScript classes and vice
versa.


== Scope and Globals

The runtime environment is contained in the $scope global Hash.

All objects in the scope are turned into global objects. Normally, there are
only two or three things from the scope that you might use: $db, $session,
$local, and $core for example. The wrapper classes such as XGen::Mongo::Base
described below make use of these objects so you won't have to.

All functions in the scope are turned into functions inside a module called
XGen. That module is in turn included in the Object class, just like the
Kernel module is. This means that all of the functions in the scope are
available to you at all times.

When you modify or create new globals, they are put back into the scope when
your code uses code in other languages. That is, modifications to the $scope
object or any global will be seen outside of Ruby.

=== $DEBUG

To set $DEBUG when running the 10gen cloud from source, start it with
DEBUG.RB.DEBUG set to true.

  ./runserver.sh -DDEBUG.RB.DEBUG=true ed.appserver.AppServer path/to/site


== Resources

Because Babble is a shared environment, we limit the use of certain system
resources.

For example, you can't create new Threads. If you try, an error will be
raised. Instead, use XGen::BabbleThread.


== GridFS

The GridFile class represents files that are stored in GridFS, the Mongo-based
file storage mechanism. Files can have attributes. See GridFile for more
information and an example.


== Mongo

=== Persistence

You can use XGen::Mongo::Base or talk to the database (stored in the $db
object) directly.

See XGen::Mongo::Base and XGen::Mongo::Cursor.

=== Logger

See XGen::Mongo::LogDevice. When running outside of the cloud (for example,
during development), all log messages are echoed to $stderr which is normally
the console.


== Ruby Shell

Normally, you start a Babble shell by typing

  ./shell

which starts a shell that uses JavaScript. If you type

  ./shell --ruby

then the shell will use Ruby and start IRB.


== Babble Applications

==== I/O

$stdout is directed to the browser. That is, calling "puts 'foo'" will write
'foo' to the HTTP response, sending it back to the browser.

$stderr is directed to the console. For example, when running Babble locally
"$stderr.puts 'foo'" will write 'foo' to the terminal window where you started
Babble.

==== Sessions

Use $session to access the session. See XGen::Rails::MongoSession for an
example wrapper class. That class could easily be used outside of Rails.

==== Logging

See XGen::Mongo::LogDevice for a class that you can use for logging to the
database.

==== Initialization

Babble apps should define an _init file (_init.rb, _init.js, ... any language
Babble supports) that tells Babble what adapter type to use and sets up
routing. Here is an example, taken from xgen/rails/init.rb:

  # Set adapter to CGI.
  $adapterType = 'CGI'

  # Look for the requested URI in the public directory. If not found, pass it on
  # to the 10gen Rails dispatcher.
  $mapUrlToJxpFile = Proc.new do |uri, req|
    uri = '/index.html' if uri == '/'
    if File.exist?(File.join($local.getRoot.getPath, 'public', uri[1..-1]))
      "/public" + uri
    else
      "public/xgen_dispatch.rb"
    end
  end

Note that you should not +return+ from this proc. If you do, you will see the
exception org.jruby.exceptions.JumpException$ReturnJump.

If you do not define $adapterType it defaults to the built-in 10gen method,
which is perfectly fine for a non-CGI application.

==== Calling other languages

+require+ and +load+ have been modified. They first run normally then, if the
file was not found, they try loading the file as one of the other languages
supported by Babble.

Also, if the +require+ or +load+ file name starts with "/local" or "local",
the lookup starts in the root directory of your site. If it starts with
"/core" or "core" then it looks in the 10gen core framework directories
(http://www.10gen.com/apidocs/). If it starts with "/external" or "external",
it looks in the third party libraries suplied by 10gen.


== Rails

=== How To Run Your Rails App On Babble

==== Preparing Your App

1. Freeze Rails.

        % rake rails:freeze:gems

   This puts a copy of Rails inside your application, in the vendor/rails
   directory.

   If you are on Mac OS X Leopard and see the error message "uninitialized
   constant Gem::GemRunner" then you can try either updating RubyGems or
   following the advice at
   http://zhuaxia.spaces.live.com/Blog/cns!71787D3A37FFC48A!620.entry

   To update gems:

     sudo gem update --system

   The advice:

     1. Edit /usr/lib/ruby/gems/1.8/gems/rails-1.2.6/lib/tasks/framework.rake
        (you will need to be root or use sudo) and add one line:

          require 'rubygems'
          require 'rubygems/gem_runner'   # This is the new line

     2. Delete the your_project/vendor/rails directory

          rm -rf your_project/vendor/rails

   Then try again.

2. Create the file _init.rb in the root directory of your Rails app:

        require 'xgen/rails/init'

3. Create the file public/xgen_dispatch.rb:

        require 'xgen/rails'
        Dispatcher.dispatch

4. Use XGen::Mongo::Base instead of ActiveRecord::Base. (Though ActiveRecord
   is not yet officially supported by Babble, work is in progress.)

        class Course < XGen::Mongo::Base

          # Declare Mongo collection name and ivars to be saved
          collection_name :courses
          field :name

          def to_s
            "Course #{name}"
          end
        end

5. Optional: don't load ActiveRecord. In config/environment.rb, inside the
   Rails::Initializer block, add this line:

        config.frameworks -= [ :active_record ]

6. If you use any gems (besides the gems that make up Rails that were already
   frozen in step 1), freeze them into your Rails app. Here's how (taken from
   http://errtheblog.com/posts/50-vendor-everything):

   1. Copy the gems you want into the directory vendor/gems.

        $ mkdir vendor/gems
        $ cd vendor/gems
        $ gem unpack some_gem_name # repeat for each gem

   2. Edit config/environment.rb and add the following inside the
      <code>Rails::Initializer.run</code> block:

        Rails::Initializer.run do |config|
          # add the next three lines
          config.load_paths += Dir["#{RAILS_ROOT}/vendor/gems/**"].map do |dir|
            File.directory?(lib = "#{dir}/lib") ? lib : dir
          end
        end

   Now you can require those gems in your code.     


==== Running Your App

Download the 10gen SDK (http://www.10gen.com/wiki/SDK), then see the Quick
Start guide (http://www.10gen.com/wiki/SDK.QuickStart).

Log messages are sent to the capped collection named rails_log_{RAILS_ENV}.

=== The contents of xgen/rails.rb

This file sets session storage, RAILS_ENV, RAILS_DEFAULT_LOGGER, includes
XGen::Mongo classes (and ActiveRecord, when that becomes available).

==== RAILS_ENV

RAILS_ENV is set from the cloud instance name. No name means "development".
The default cloud instance name "www" is turned into "production".

==== Sessions

Sessions are stored in the database. See XGen::Rails::MongoSession.

==== Logging

Log messages go to the database. xgen/rails.rb sets RAILS_DEFAULT_LOGGER to
use XGen::Mongo::LogDevice. The log messages are stored in a capped collection
named "rails_log_{RAILS_ENV}". See XGen::Mongo::LogDevice.

=== ActiveRecord

ActiveRecord::Base is not yet supported. We are working on it.
