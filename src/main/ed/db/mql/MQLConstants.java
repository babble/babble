/**
*      Copyright (C) 2008 10gen Inc.
*  
*    Licensed under the Apache License, Version 2.0 (the "License");
*    you may not use this file except in compliance with the License.
*    You may obtain a copy of the License at
*  
*       http://www.apache.org/licenses/LICENSE-2.0
*  
*    Unless required by applicable law or agreed to in writing, software
*    distributed under the License is distributed on an "AS IS" BASIS,
*    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*    See the License for the specific language governing permissions and
*    limitations under the License.
*/

/* Generated By:JJTree&JavaCC: Do not edit this line. MQLConstants.java */
package ed.db.mql;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MQLConstants {

    /**
     * End of File.
     */
    int EOF = 0;
    /**
     * RegularExpression Id.
     */
    int COMMA = 5;
    /**
     * RegularExpression Id.
     */
    int DOT = 6;
    /**
     * RegularExpression Id.
     */
    int EQ = 7;
    /**
     * RegularExpression Id.
     */
    int NE = 8;
    /**
     * RegularExpression Id.
     */
    int GT = 9;
    /**
     * RegularExpression Id.
     */
    int GE = 10;
    /**
     * RegularExpression Id.
     */
    int LT = 11;
    /**
     * RegularExpression Id.
     */
    int LE = 12;
    /**
     * RegularExpression Id.
     */
    int PLUS = 13;
    /**
     * RegularExpression Id.
     */
    int MINUS = 14;
    /**
     * RegularExpression Id.
     */
    int TIMES = 15;
    /**
     * RegularExpression Id.
     */
    int DIV = 16;
    /**
     * RegularExpression Id.
     */
    int NEW = 17;
    /**
     * RegularExpression Id.
     */
    int ALL = 18;
    /**
     * RegularExpression Id.
     */
    int ANY = 19;
    /**
     * RegularExpression Id.
     */
    int EXISTS = 20;
    /**
     * RegularExpression Id.
     */
    int SOME = 21;
    /**
     * RegularExpression Id.
     */
    int EMPTY = 22;
    /**
     * RegularExpression Id.
     */
    int ASC = 23;
    /**
     * RegularExpression Id.
     */
    int DESC = 24;
    /**
     * RegularExpression Id.
     */
    int ORDER = 25;
    /**
     * RegularExpression Id.
     */
    int BY = 26;
    /**
     * RegularExpression Id.
     */
    int LIMIT = 27;
    /**
     * RegularExpression Id.
     */
    int SKIPPER = 28;
    /**
     * RegularExpression Id.
     */
    int IS = 29;
    /**
     * RegularExpression Id.
     */
    int MEMBER = 30;
    /**
     * RegularExpression Id.
     */
    int OF = 31;
    /**
     * RegularExpression Id.
     */
    int LIKE = 32;
    /**
     * RegularExpression Id.
     */
    int ESCAPE = 33;
    /**
     * RegularExpression Id.
     */
    int BETWEEN = 34;
    /**
     * RegularExpression Id.
     */
    int NULL = 35;
    /**
     * RegularExpression Id.
     */
    int AVG = 36;
    /**
     * RegularExpression Id.
     */
    int MIN = 37;
    /**
     * RegularExpression Id.
     */
    int MAX = 38;
    /**
     * RegularExpression Id.
     */
    int SUM = 39;
    /**
     * RegularExpression Id.
     */
    int COUNT = 40;
    /**
     * RegularExpression Id.
     */
    int OR = 41;
    /**
     * RegularExpression Id.
     */
    int AND = 42;
    /**
     * RegularExpression Id.
     */
    int NOT = 43;
    /**
     * RegularExpression Id.
     */
    int CONCAT = 44;
    /**
     * RegularExpression Id.
     */
    int SUBSTRING = 45;
    /**
     * RegularExpression Id.
     */
    int TRIM = 46;
    /**
     * RegularExpression Id.
     */
    int LOWER = 47;
    /**
     * RegularExpression Id.
     */
    int UPPER = 48;
    /**
     * RegularExpression Id.
     */
    int LEADING = 49;
    /**
     * RegularExpression Id.
     */
    int TRAILING = 50;
    /**
     * RegularExpression Id.
     */
    int BOTH = 51;
    /**
     * RegularExpression Id.
     */
    int LENGTH = 52;
    /**
     * RegularExpression Id.
     */
    int LOCATE = 53;
    /**
     * RegularExpression Id.
     */
    int ABS = 54;
    /**
     * RegularExpression Id.
     */
    int SQRT = 55;
    /**
     * RegularExpression Id.
     */
    int MOD = 56;
    /**
     * RegularExpression Id.
     */
    int SIZE = 57;
    /**
     * RegularExpression Id.
     */
    int CURRENT_DATE = 58;
    /**
     * RegularExpression Id.
     */
    int CURRENT_TIME = 59;
    /**
     * RegularExpression Id.
     */
    int CURRENT_TIMESTAMP = 60;
    /**
     * RegularExpression Id.
     */
    int SELECT = 61;
    /**
     * RegularExpression Id.
     */
    int DISTINCT = 62;
    /**
     * RegularExpression Id.
     */
    int FROM = 63;
    /**
     * RegularExpression Id.
     */
    int UPDATE = 64;
    /**
     * RegularExpression Id.
     */
    int DELETE = 65;
    /**
     * RegularExpression Id.
     */
    int WHERE = 66;
    /**
     * RegularExpression Id.
     */
    int GROUP = 67;
    /**
     * RegularExpression Id.
     */
    int HAVING = 68;
    /**
     * RegularExpression Id.
     */
    int AS = 69;
    /**
     * RegularExpression Id.
     */
    int LEFT = 70;
    /**
     * RegularExpression Id.
     */
    int OUTER = 71;
    /**
     * RegularExpression Id.
     */
    int INNER = 72;
    /**
     * RegularExpression Id.
     */
    int JOIN = 73;
    /**
     * RegularExpression Id.
     */
    int FETCH = 74;
    /**
     * RegularExpression Id.
     */
    int IN = 75;
    /**
     * RegularExpression Id.
     */
    int SET = 76;
    /**
     * RegularExpression Id.
     */
    int OBJECT = 77;
    /**
     * RegularExpression Id.
     */
    int INTEGER_LITERAL = 78;
    /**
     * RegularExpression Id.
     */
    int DECIMAL_LITERAL = 79;
    /**
     * RegularExpression Id.
     */
    int EXPONENT = 80;
    /**
     * RegularExpression Id.
     */
    int STRING_LITERAL = 81;
    /**
     * RegularExpression Id.
     */
    int CHARACTER_LITERAL = 82;
    /**
     * RegularExpression Id.
     */
    int BOOLEAN_LITERAL = 83;
    /**
     * RegularExpression Id.
     */
    int IDENTIFIER = 84;
    /**
     * RegularExpression Id.
     */
    int LETTER = 85;
    /**
     * RegularExpression Id.
     */
    int DIGIT = 86;

    /**
     * Lexical state.
     */
    int DEFAULT = 0;

    /**
     * Literal token values.
     */
    String[] tokenImage = {
            "<EOF>",
            "\" \"",
            "\"\\n\"",
            "\"\\r\"",
            "\"\\t\"",
            "\",\"",
            "\".\"",
            "\"=\"",
            "\"<>\"",
            "\">\"",
            "\">=\"",
            "\"<\"",
            "\"<=\"",
            "\"+\"",
            "\"-\"",
            "\"*\"",
            "\"/\"",
            "\"NEW\"",
            "\"ALL\"",
            "\"ANY\"",
            "\"EXISTS\"",
            "\"SOME\"",
            "\"EMPTY\"",
            "\"ASC\"",
            "\"DESC\"",
            "\"ORDER\"",
            "\"BY\"",
            "\"LIMIT\"",
            "\"SKIP\"",
            "\"IS\"",
            "\"MEMBER\"",
            "\"OF\"",
            "\"LIKE\"",
            "\"ESCAPE\"",
            "\"BETWEEN\"",
            "\"NULL\"",
            "\"AVG\"",
            "\"MIN\"",
            "\"MAX\"",
            "\"SUM\"",
            "\"COUNT\"",
            "\"OR\"",
            "\"AND\"",
            "\"NOT\"",
            "\"CONCAT\"",
            "\"SUBSTRING\"",
            "\"TRIM\"",
            "\"LOWER\"",
            "\"UPPER\"",
            "\"LEADING\"",
            "\"TRAILING\"",
            "\"BOTH\"",
            "\"LENGTH\"",
            "\"LOCATE\"",
            "\"ABS\"",
            "\"SQRT\"",
            "\"MOD\"",
            "\"SIZE\"",
            "\"CURRENT_DATE\"",
            "\"CURRENT_TIME\"",
            "\"CURRENT_TIMESTAMP\"",
            "\"SELECT\"",
            "\"DISTINCT\"",
            "\"FROM\"",
            "\"UPDATE\"",
            "\"DELETE\"",
            "\"WHERE\"",
            "\"GROUP\"",
            "\"HAVING\"",
            "\"AS\"",
            "\"LEFT\"",
            "\"OUTER\"",
            "\"INNER\"",
            "\"JOIN\"",
            "\"FETCH\"",
            "\"IN\"",
            "\"SET\"",
            "\"OBJECT\"",
            "<INTEGER_LITERAL>",
            "<DECIMAL_LITERAL>",
            "<EXPONENT>",
            "<STRING_LITERAL>",
            "<CHARACTER_LITERAL>",
            "<BOOLEAN_LITERAL>",
            "<IDENTIFIER>",
            "<LETTER>",
            "<DIGIT>",
            "\"(\"",
            "\")\"",
            "\":\"",
            "\"?\"",
    };

}
