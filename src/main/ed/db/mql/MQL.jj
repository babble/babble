/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ./MQL.jj */
/*@egen*//*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 *  An JP QL - like grammar parser.  Originally from OpenJPA. Kudos to Patrick and Marc.
 */

options {
	                    
	                           
	             
	                         
	JAVA_UNICODE_ESCAPE = true;
	STATIC = false;
	                        

	LOOKAHEAD = 1;

	// debugging variables
	// DEBUG_PARSER = true; 		// simple parser debug
	// DEBUG_TOKEN_MANAGER = true; 	// more verbose token manager debug
	// DEBUG_LOOKAHEAD = true; 		// more verbose lookahead debug

	SANITY_CHECK = true; // check for left-recursion, etc (must always be true)


	// FORCE_LA_CHECK = true;
}

PARSER_BEGIN(MQL)
package ed.db.mql;

import java.io.*;

import ed.db.mql.nodes.*;

/**
 *	@nojavadoc
 */
public class MQL/*@bgen(jjtree)*/implements MQLTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTMQLState jjtree = new JJTMQLState();

/*@egen*/
    String mql;
    boolean inEnumPath;

    public MQL (String mql) {
        this (new StringReader (mql));
        this.mql = mql;
    }

    public static void main (String[] args) throws Exception {

        if (args.length > 0) {
            for (int i = 0; i < args.length; i++) {
                MQL parser = new MQL (args[i]);
                SimpleNode ast = (SimpleNode) parser.parseQuery ();
                // ast.dump ("");
                QueryInfo qi = new QueryInfo();

                ast.generateQuery(qi);

                System.out.println(qi.toString());
            }
        }
        else
        {
            MQL parser = new MQL (System.in);

            while (true) {
                System.out.print ("Enter Expression: ");
                System.out.flush ();

                try {
                    SimpleNode ast = (SimpleNode) parser.parseQuery ();

                    if (ast == null) {
                        return;
                    }
                    else {
                        ast.dump ("");
                    }
                }
                catch (Throwable x) {
                    x.printStackTrace ();
                    return;
                }
            }
        }
    }
}

PARSER_END(MQL)


SKIP :
{
 	" "
    | "\n"
	| "\r"
	| "\t"
}


TOKEN [ IGNORE_CASE ]: /* basics */
{
	< COMMA: "," >

	|	< DOT: "." >

	|	< EQ: "=" >
	|	< NE: "<>" >
	|	< GT: ">" >
	|	< GE: ">=" >
	|	< LT: "<" >
	|	< LE: "<=" >

	|	< PLUS: "+" >
	|	< MINUS: "-" >

	|	< TIMES: "*" >
	|	< DIV: "/" >

	|	< NEW: "NEW" >

	|	< ALL: "ALL" >
	|	< ANY: "ANY" >
	|	< EXISTS: "EXISTS" >
	|	< SOME: "SOME" >
	|	< EMPTY: "EMPTY" >

	|	< ASC: "ASC" >
	|	< DESC: "DESC" >
	|	< ORDER: "ORDER" >
	|	< BY: "BY" >

	|   < LIMIT: "LIMIT">
	|   < SKIPPER: "SKIP" >

	|	< IS: "IS" >
	|	< MEMBER: "MEMBER" >
	|	< OF: "OF" >
	|	< LIKE: "LIKE" >
	|	< ESCAPE: "ESCAPE" >
	|	< BETWEEN: "BETWEEN" >

	|	< NULL: "NULL" >
}

TOKEN [ IGNORE_CASE ]: /* aggregates */
{
	< AVG: "AVG" >
	|	< MIN: "MIN" >
	|	< MAX: "MAX" >
	|	< SUM: "SUM" >
	|	< COUNT: "COUNT" >
}

TOKEN [ IGNORE_CASE ]: /* boolean arithmetic */
{
	< OR: "OR" >
	|	< AND: "AND" >
	|	< NOT: "NOT" >
}

TOKEN [ IGNORE_CASE ]: /* functions returning strings */
{
	< CONCAT: "CONCAT" >
	|	< SUBSTRING: "SUBSTRING" >
	|	< TRIM: "TRIM" >
	|	< LOWER: "LOWER" >
	|	< UPPER: "UPPER" >
}

TOKEN [ IGNORE_CASE ]: /* trim specification */
{
	< LEADING: "LEADING" >
	|	< TRAILING: "TRAILING" >
	|	< BOTH: "BOTH" >
}


TOKEN [ IGNORE_CASE ]: /* functions returning numerics */
{
	< LENGTH: "LENGTH" >
	|	< LOCATE: "LOCATE" >
	|	< ABS: "ABS" >
	|	< SQRT: "SQRT" >
	|	< MOD: "MOD" >
	|	< SIZE: "SIZE" >
}


TOKEN [ IGNORE_CASE ]: /* functions returning datetime */
{
	< CURRENT_DATE: "CURRENT_DATE" >
	|	< CURRENT_TIME: "CURRENT_TIME" >
	|	< CURRENT_TIMESTAMP: "CURRENT_TIMESTAMP" >
}

TOKEN [ IGNORE_CASE ]: /* type of query */
{
	< SELECT: "SELECT" >
	|	< DISTINCT: "DISTINCT" >
	|	< FROM: "FROM" >

	|	< UPDATE: "UPDATE" >
	|	< DELETE: "DELETE" >

	|	< WHERE: "WHERE" >
	|	< GROUP: "GROUP" >
	|	< HAVING: "HAVING" >

	|	< AS: "AS" >
	|	< LEFT: "LEFT" >
	|	< OUTER: "OUTER" >
	|	< INNER: "INNER" >
	|	< JOIN: "JOIN" >
	|	< FETCH: "FETCH" >
	|	< IN: "IN" >
	|	< SET: "SET" >

	|	< OBJECT: "OBJECT" >
}


/* inspired by the Java 1.0.2 specification */
/* ### should we limit this to the length that is valid in java? */
TOKEN : /* literals */
{
	< INTEGER_LITERAL: ((["0"-"9"])+) (["l","L"])? >
	| < DECIMAL_LITERAL:
		(((["0"-"9"])* "." (["0"-"9"])+) (<EXPONENT>)? (["f","F","d","D"])?
		| ((["0"-"9"])+ ".") (<EXPONENT>)? (["f","F","d","D"])?
		| ((["0"-"9"])+) (<EXPONENT>) (["f","F","d","D"])?
		| ((["0"-"9"])+) (<EXPONENT>)? (["f","F","d","D"])?) >
	| < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
	| < STRING_LITERAL: "'"
	  (("''" | ~["'"])
		/*
	  (("''" | ~["'","\\","\n","\r"])
		| ("\\"
			( ["n","t","b","r","f","\\","'"]
			| ["0"-"7"] ( ["0"-"7"] )?
			| ["0"-"3"] ["0"-"7"] ["0"-"7"]
			)
		  )
		*/
	  )*
	  "'"
	>
	| < CHARACTER_LITERAL: "'"
	  (   (~["'","\\","\n","\r"])
		| ("\\"
			( ["n","t","b","r","f","\\","'"]
			| ["0"-"7"] ( ["0"-"7"] )?
			| ["0"-"3"] ["0"-"7"] ["0"-"7"]
			)
		  )
	  )
	  "'"
	>
}

TOKEN [ IGNORE_CASE ]: /* boolean literals can be case-insensitive */
{
	< BOOLEAN_LITERAL: "TRUE" | "FALSE" >
}

/* From the Java 1.0.2 specification */
TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
	|
  < #LETTER:
	  [
	   "$", 			// $
	   "A"-"Z", 	// A-Z
	   "_", 			// _
	   "a"-"z", 	// a-z
	   "\u00c0"-"\u00d6",
	   "\u00d8"-"\u00f6",
	   "\u00f8"-"\u00ff",
	   "\u0100"-"\u1fff",
	   "\u3040"-"\u318f",
	   "\u3300"-"\u337f",
	   "\u3400"-"\u3d2d",
	   "\u4e00"-"\u9fff",
	   "\uf900"-"\ufaff"
	  ]
  >
	|
  < #DIGIT:
	  [
	   "0"-"9", 	// 0-9
	   "\u0660"-"\u0669",
	   "\u06f0"-"\u06f9",
	   "\u0966"-"\u096f",
	   "\u09e6"-"\u09ef",
	   "\u0a66"-"\u0a6f",
	   "\u0ae6"-"\u0aef",
	   "\u0b66"-"\u0b6f",
	   "\u0be7"-"\u0bef",
	   "\u0c66"-"\u0c6f",
	   "\u0ce6"-"\u0cef",
	   "\u0d66"-"\u0d6f",
	   "\u0e50"-"\u0e59",
	   "\u0ed0"-"\u0ed9",
	   "\u1040"-"\u1049"
	  ]
  >
}


Node parseQuery() : { }
{
	(select_statement() | update_statement() | delete_statement()) <EOF>
	{
		return jjtree.rootNode();
	}
}


void select_statement()         : {/*@bgen(jjtree) SELECT */
  MQLSELECT jjtn000 = new MQLSELECT(this, JJTSELECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) SELECT */
        try {
/*@egen*/
	select_clause()
		from_clause()
		[where_clause()]
		[groupby_clause()]
		[having_clause()]
		[orderby_clause()]
		[skip_clause()]
		[limit_clause()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void update_statement()         : {/*@bgen(jjtree) UPDATE */
  MQLUPDATE jjtn000 = new MQLUPDATE(this, JJTUPDATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) UPDATE */
        try {
/*@egen*/
	update_clause() [ where_clause() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void delete_statement()         : {/*@bgen(jjtree) DELETE */
  MQLDELETE jjtn000 = new MQLDELETE(this, JJTDELETE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) DELETE */
        try {
/*@egen*/
	<DELETE> <FROM> (/*@bgen(jjtree) FROM */
                         {
                           MQLFROM jjtn001 = new MQLFROM(this, JJTFROM);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                         }
                         try {
/*@egen*/from_item()/*@bgen(jjtree)*/
                         } catch (Throwable jjte001) {
                           if (jjtc001) {
                             jjtree.clearNodeScope(jjtn001);
                             jjtc001 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte001 instanceof RuntimeException) {
                             throw (RuntimeException)jjte001;
                           }
                           if (jjte001 instanceof ParseException) {
                             throw (ParseException)jjte001;
                           }
                           throw (Error)jjte001;
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, true);
                           }
                         }
/*@egen*/      ) [where_clause()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void from_clause()       : {/*@bgen(jjtree) FROM */
  MQLFROM jjtn000 = new MQLFROM(this, JJTFROM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) FROM */
        try {
/*@egen*/
	<FROM> identification_variable_declaration()
	(LOOKAHEAD(1) <COMMA> (LOOKAHEAD(collection_member_declaration()) collection_member_declaration() | LOOKAHEAD(identification_variable_declaration())identification_variable_declaration()))*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void identification_variable_declaration(): { }
{
	from_item() (LOOKAHEAD(fetch_join()) fetch_join() | LOOKAHEAD(inner_join()) inner_join() | LOOKAHEAD(outer_join()) outer_join())*
}


void from_item()           : {/*@bgen(jjtree) FROMITEM */
  MQLFROMITEM jjtn000 = new MQLFROMITEM(this, JJTFROMITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) FROMITEM */
        try {
/*@egen*/
	abstract_schema_name() [LOOKAHEAD(1)<AS>] [LOOKAHEAD(identification_variable())identification_variable()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void subquery_from_clause()       : {/*@bgen(jjtree) FROM */
  MQLFROM jjtn000 = new MQLFROM(this, JJTFROM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) FROM */
        try {
/*@egen*/
	<FROM> subquery_from_item()
		( LOOKAHEAD(1) <COMMA> subquery_from_item() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void subquery_from_item() : { }
{
        LOOKAHEAD(collection_member_declaration()) collection_member_declaration()
	| LOOKAHEAD(identification_variable_declaration()) identification_variable_declaration()
}

void inner_join()            : {/*@bgen(jjtree) INNERJOIN */
  MQLINNERJOIN jjtn000 = new MQLINNERJOIN(this, JJTINNERJOIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) INNERJOIN */
        try {
/*@egen*/
	[<INNER>] <JOIN> path() [<AS>] identification_variable()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void collection_member_declaration()            : {/*@bgen(jjtree) INNERJOIN */
  MQLINNERJOIN jjtn000 = new MQLINNERJOIN(this, JJTINNERJOIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) INNERJOIN */
        try {
/*@egen*/
	// synonymous with "INNER JOIN path AS identifier" (InnerJoin)
	<IN> "(" path() ")" [ LOOKAHEAD(1)<AS>] identification_variable()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void outer_join()            : {/*@bgen(jjtree) OUTERJOIN */
  MQLOUTERJOIN jjtn000 = new MQLOUTERJOIN(this, JJTOUTERJOIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) OUTERJOIN */
        try {
/*@egen*/
	<LEFT> [ <OUTER>] <JOIN> path() [ LOOKAHEAD(1)<AS>] identification_variable()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void fetch_join() : { }
{
	outer_fetch_join() | inner_fetch_join()
}


void outer_fetch_join()                 : {/*@bgen(jjtree) OUTERFETCHJOIN */
  MQLOUTERFETCHJOIN jjtn000 = new MQLOUTERFETCHJOIN(this, JJTOUTERFETCHJOIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) OUTERFETCHJOIN */
        try {
/*@egen*/
	<LEFT> [<OUTER>] <JOIN> <FETCH> path()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void inner_fetch_join()                 : {/*@bgen(jjtree) INNERFETCHJOIN */
  MQLINNERFETCHJOIN jjtn000 = new MQLINNERFETCHJOIN(this, JJTINNERFETCHJOIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) INNERFETCHJOIN */
        try {
/*@egen*/
	[<INNER>] <JOIN> <FETCH> path()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void path()       : {/*@bgen(jjtree) PATH */
  MQLPATH jjtn000 = new MQLPATH(this, JJTPATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) PATH */
        try {
/*@egen*/
	// a path is any dot-separated path expression starting with a
	// non-reserved word
	identification_variable() (<DOT> path_component())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void update_clause() : { }
{
	<UPDATE>/*@bgen(jjtree) FROM */
                 {
                   MQLFROM jjtn001 = new MQLFROM(this, JJTFROM);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                 }
                 try {
/*@egen*/ from_item()/*@bgen(jjtree)*/
                 } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     throw (RuntimeException)jjte001;
                   }
                   if (jjte001 instanceof ParseException) {
                     throw (ParseException)jjte001;
                   }
                   throw (Error)jjte001;
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                   }
                 }
/*@egen*/       set_clause()
}


void set_clause() : { }
{
	<SET> update_item() (<COMMA> update_item())*
}


void update_item()             : {/*@bgen(jjtree) UPDATEITEM */
  MQLUPDATEITEM jjtn000 = new MQLUPDATEITEM(this, JJTUPDATEITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) UPDATEITEM */
        try {
/*@egen*/
	path() EQ() new_value()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void new_value()              : {/*@bgen(jjtree) UPDATEVALUE */
  MQLUPDATEVALUE jjtn000 = new MQLUPDATEVALUE(this, JJTUPDATEVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) UPDATEVALUE */
        try {
/*@egen*/
	LOOKAHEAD(arithmetic_expression()) arithmetic_expression() |
	LOOKAHEAD(string_primary()) string_primary() |
	LOOKAHEAD(datetime_primary()) datetime_primary() |
	LOOKAHEAD(boolean_primary()) boolean_primary() |
	LOOKAHEAD(enum_primary()) enum_primary() |
	LOOKAHEAD(simple_entity_expression()) simple_entity_expression() |
	<NULL>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void simple_entity_expression() : { }
{
	identification_variable() | input_parameter()
}


void select_clause()               : {/*@bgen(jjtree) SELECTCLAUSE */
  MQLSELECTCLAUSE jjtn000 = new MQLSELECTCLAUSE(this, JJTSELECTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) SELECTCLAUSE */
        try {
/*@egen*/
	<SELECT> [distinct()] [select_expressions()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void simple_select_clause()               : {/*@bgen(jjtree) SELECTCLAUSE */
  MQLSELECTCLAUSE jjtn000 = new MQLSELECTCLAUSE(this, JJTSELECTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) SELECTCLAUSE */
        try {
/*@egen*/
	<SELECT> [distinct()] subselect_expressions()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void select_expressions()                    : {/*@bgen(jjtree) SELECTEXPRESSIONS */
  MQLSELECTEXPRESSIONS jjtn000 = new MQLSELECTEXPRESSIONS(this, JJTSELECTEXPRESSIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) SELECTEXPRESSIONS */
        try {
/*@egen*/
	select_expression() (<COMMA> select_expression())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void select_expression()                   : {/*@bgen(jjtree) SELECTEXPRESSION */
  MQLSELECTEXPRESSION jjtn000 = new MQLSELECTEXPRESSION(this, JJTSELECTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) SELECTEXPRESSION */
        try {
/*@egen*/
	aggregate_select_expression()
		| LOOKAHEAD(path()) path()
		| identification_variable()
		| (<OBJECT> "(" identification_variable() ")")
		| constructor_expression()
		| select_extension()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void select_extension()                  : {/*@bgen(jjtree) SELECTEXTENSION */
  MQLSELECTEXTENSION jjtn000 = new MQLSELECTEXTENSION(this, JJTSELECTEXTENSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) SELECTEXTENSION */
    try {
/*@egen*/
    scalar_function()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void subselect_expressions()                    : {/*@bgen(jjtree) SELECTEXPRESSIONS */
  MQLSELECTEXPRESSIONS jjtn000 = new MQLSELECTEXPRESSIONS(this, JJTSELECTEXPRESSIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) SELECTEXPRESSIONS */
        try {
/*@egen*/
	subselect_expression() (<COMMA> subselect_expression())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void subselect_expression()                   : {/*@bgen(jjtree) SELECTEXPRESSION */
  MQLSELECTEXPRESSION jjtn000 = new MQLSELECTEXPRESSION(this, JJTSELECTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) SELECTEXPRESSION */
        try {
/*@egen*/
	LOOKAHEAD(path()) path()
		| aggregate_select_expression()
		| LOOKAHEAD(1) identification_variable()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void constructor_expression()              : {/*@bgen(jjtree) CONSTRUCTOR */
  MQLCONSTRUCTOR jjtn000 = new MQLCONSTRUCTOR(this, JJTCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) CONSTRUCTOR */
        try {
/*@egen*/
	<NEW> classname() constructor_parameters()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void classname()            :
{/*@bgen(jjtree) CLASSNAME */
  MQLCLASSNAME jjtn000 = new MQLCLASSNAME(this, JJTCLASSNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) CLASSNAME */
        try {
/*@egen*/
	identification_variable() (<DOT> identification_variable())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void constructor_parameters()                    : {/*@bgen(jjtree) CONSTRUCTORPARAMS */
  MQLCONSTRUCTORPARAMS jjtn000 = new MQLCONSTRUCTORPARAMS(this, JJTCONSTRUCTORPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) CONSTRUCTORPARAMS */
        try {
/*@egen*/
	"(" (constructor_parameter()) (<COMMA> (constructor_parameter()))* ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void constructor_parameter()                   : {/*@bgen(jjtree) CONSTRUCTORPARAM */
  MQLCONSTRUCTORPARAM jjtn000 = new MQLCONSTRUCTORPARAM(this, JJTCONSTRUCTORPARAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) CONSTRUCTORPARAM */
        try {
/*@egen*/
	(path() | aggregate_select_expression())/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


/* rewritten to reduce lookaheads */
void aggregate_select_expression()            : {/*@bgen(jjtree) AGGREGATE */
  MQLAGGREGATE jjtn000 = new MQLAGGREGATE(this, JJTAGGREGATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) AGGREGATE */
        try {
/*@egen*/
	(avg() | max() | min() | sum() | count())/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void distinct()           : {/*@bgen(jjtree) DISTINCT */
  MQLDISTINCT jjtn000 = new MQLDISTINCT(this, JJTDISTINCT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) DISTINCT */
        try {
/*@egen*/
	<DISTINCT>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void aggregate_path() : { }
{
	"(" (
		LOOKAHEAD(arithmetic_expression()) arithmetic_expression() |
		LOOKAHEAD(distinct_path()) distinct_path() |
		LOOKAHEAD(path()) path() |
		LOOKAHEAD(identification_variable()) identification_variable()
	) ")"
}


void distinct_path()               : {/*@bgen(jjtree) DISTINCTPATH */
  MQLDISTINCTPATH jjtn000 = new MQLDISTINCTPATH(this, JJTDISTINCTPATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) DISTINCTPATH */
        try {
/*@egen*/
	<DISTINCT> (LOOKAHEAD(path()) path() | identification_variable())/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void count()        : {/*@bgen(jjtree) COUNT */
  MQLCOUNT jjtn000 = new MQLCOUNT(this, JJTCOUNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) COUNT */
        try {
/*@egen*/
	<COUNT> "(" [<TIMES>] ")"/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}


void avg()          : {/*@bgen(jjtree) AVERAGE */
  MQLAVERAGE jjtn000 = new MQLAVERAGE(this, JJTAVERAGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) AVERAGE */
        try {
/*@egen*/
	<AVG> aggregate_path()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void max()      : {/*@bgen(jjtree) MAX */
  MQLMAX jjtn000 = new MQLMAX(this, JJTMAX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) MAX */
        try {
/*@egen*/
	<MAX> aggregate_path()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void min()      : {/*@bgen(jjtree) MIN */
  MQLMIN jjtn000 = new MQLMIN(this, JJTMIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) MIN */
        try {
/*@egen*/
	<MIN> aggregate_path()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void sum()      : {/*@bgen(jjtree) SUM */
  MQLSUM jjtn000 = new MQLSUM(this, JJTSUM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) SUM */
        try {
/*@egen*/
	<SUM> aggregate_path()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void where_clause()        : {/*@bgen(jjtree) WHERE */
  MQLWHERE jjtn000 = new MQLWHERE(this, JJTWHERE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) WHERE */
        try {
/*@egen*/
	<WHERE> conditional_expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void groupby_clause()          : {/*@bgen(jjtree) GROUPBY */
  MQLGROUPBY jjtn000 = new MQLGROUPBY(this, JJTGROUPBY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) GROUPBY */
        try {
/*@egen*/
	<GROUP> <BY> groupby_item()
		(LOOKAHEAD(2) <COMMA> (groupby_item()))*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void groupby_item() : { }
{
	LOOKAHEAD(path()) path() | identification_variable() | groupby_extension()
}


void groupby_extension()                   : {/*@bgen(jjtree) GROUPBYEXTENSION */
  MQLGROUPBYEXTENSION jjtn000 = new MQLGROUPBYEXTENSION(this, JJTGROUPBYEXTENSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) GROUPBYEXTENSION */
    try {
/*@egen*/
    scalar_function()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void having_clause()         : {/*@bgen(jjtree) HAVING */
  MQLHAVING jjtn000 = new MQLHAVING(this, JJTHAVING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) HAVING */
        try {
/*@egen*/
	<HAVING> conditional_expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void subquery()            : {/*@bgen(jjtree) SUBSELECT */
  MQLSUBSELECT jjtn000 = new MQLSUBSELECT(this, JJTSUBSELECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) SUBSELECT */
        try {
/*@egen*/
	simple_select_clause()
		subquery_from_clause()
		[LOOKAHEAD(where_clause()) where_clause()]
		[LOOKAHEAD(groupby_clause()) groupby_clause()]
		[LOOKAHEAD(having_clause()) having_clause()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


/* changed to eliminate left recursion */
void conditional_expression() : { }
{
	conditional_term() (LOOKAHEAD(2) <OR> (/*@bgen(jjtree) #OR( 2) */
                                               {
                                                 MQLOR jjtn001 = new MQLOR(this, JJTOR);
                                                 boolean jjtc001 = true;
                                                 jjtree.openNodeScope(jjtn001);
                                               }
                                               try {
/*@egen*/conditional_expression()/*@bgen(jjtree)*/
                                               } catch (Throwable jjte001) {
                                                 if (jjtc001) {
                                                   jjtree.clearNodeScope(jjtn001);
                                                   jjtc001 = false;
                                                 } else {
                                                   jjtree.popNode();
                                                 }
                                                 if (jjte001 instanceof RuntimeException) {
                                                   throw (RuntimeException)jjte001;
                                                 }
                                                 if (jjte001 instanceof ParseException) {
                                                   throw (ParseException)jjte001;
                                                 }
                                                 throw (Error)jjte001;
                                               } finally {
                                                 if (jjtc001) {
                                                   jjtree.closeNodeScope(jjtn001,  2);
                                                 }
                                               }
/*@egen*/       ))*
}


/* changed to eliminate left recursion */
void conditional_term() : { }
{
	conditional_factor() (LOOKAHEAD(2) <AND> (/*@bgen(jjtree) #AND( 2) */
                                                  {
                                                    MQLAND jjtn001 = new MQLAND(this, JJTAND);
                                                    boolean jjtc001 = true;
                                                    jjtree.openNodeScope(jjtn001);
                                                  }
                                                  try {
/*@egen*/conditional_term()/*@bgen(jjtree)*/
                                                  } catch (Throwable jjte001) {
                                                    if (jjtc001) {
                                                      jjtree.clearNodeScope(jjtn001);
                                                      jjtc001 = false;
                                                    } else {
                                                      jjtree.popNode();
                                                    }
                                                    if (jjte001 instanceof RuntimeException) {
                                                      throw (RuntimeException)jjte001;
                                                    }
                                                    if (jjte001 instanceof ParseException) {
                                                      throw (ParseException)jjte001;
                                                    }
                                                    throw (Error)jjte001;
                                                  } finally {
                                                    if (jjtc001) {
                                                      jjtree.closeNodeScope(jjtn001,  2);
                                                    }
                                                  }
/*@egen*/        ))*
}


void conditional_factor() : { }
{
	LOOKAHEAD(<NOT> conditional_primary())
	(<NOT>/*@bgen(jjtree) NOT */
               {
                 MQLNOT jjtn001 = new MQLNOT(this, JJTNOT);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*/ conditional_primary()/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                 }
               }
/*@egen*/     ) | conditional_primary()
}


void conditional_primary() : { }
{
	LOOKAHEAD(simple_cond_expression())
	simple_cond_expression() | "(" conditional_expression() ")"
}


void simple_cond_expression() : { }
{
	//LOOKAHEAD(all_or_any_expression()) all_or_any_expression() |
	LOOKAHEAD(exists_expression()) exists_expression() |
	LOOKAHEAD(comparison_expression()) comparison_expression() |
	LOOKAHEAD(between_expression()) between_expression() |
	LOOKAHEAD(like_expression()) like_expression() |
	LOOKAHEAD(in_expression()) in_expression() |
	LOOKAHEAD(null_comparison_expression()) null_comparison_expression() |
	LOOKAHEAD(empty_collection_comparison_expression()) empty_collection_comparison_expression() |
	LOOKAHEAD(collection_member_expression()) collection_member_expression()
}


void between_expression()          : {/*@bgen(jjtree) BETWEEN */
  MQLBETWEEN jjtn000 = new MQLBETWEEN(this, JJTBETWEEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) BETWEEN */
        try {
/*@egen*/
	LOOKAHEAD(6) arithmetic_expression()
		[<NOT> { jjtn000.not = true; }] <BETWEEN> arithmetic_expression()
		<AND> arithmetic_expression()
	| LOOKAHEAD(6) string_expression()
		[<NOT> { jjtn000.not = true; }] <BETWEEN> string_expression() <AND> string_expression()
	| LOOKAHEAD(6) datetime_expression()
		[<NOT> { jjtn000.not = true; }] <BETWEEN> datetime_expression() <AND> datetime_expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void in_expression()     : {/*@bgen(jjtree) IN */
  MQLIN jjtn000 = new MQLIN(this, JJTIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) IN */
        try {
/*@egen*/
	path() [ LOOKAHEAD(1) <NOT> { jjtn000.not = true; }] <IN>
		"(" (literal_or_param()
			(<COMMA> (literal_or_param()))* | subquery())
		")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void literal_or_param() : { }
{
	(numeric_literal()
	| string_literal()
	| boolean_literal()
	| input_parameter())
}


void like_expression()       : {/*@bgen(jjtree) LIKE */
  MQLLIKE jjtn000 = new MQLLIKE(this, JJTLIKE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) LIKE */
        try {
/*@egen*/
	string_expression() [<NOT> { jjtn000.not = true; }] <LIKE> pattern_value()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void null_comparison_expression()         : {/*@bgen(jjtree) ISNULL */
  MQLISNULL jjtn000 = new MQLISNULL(this, JJTISNULL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) ISNULL */
        try {
/*@egen*/
	(input_parameter() | path())
	<IS> [<NOT> { jjtn000.not = true; }] <NULL>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void empty_collection_comparison_expression()          : {/*@bgen(jjtree) ISEMPTY */
  MQLISEMPTY jjtn000 = new MQLISEMPTY(this, JJTISEMPTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) ISEMPTY */
        try {
/*@egen*/
	path() <IS> [<NOT> { jjtn000.not = true; }] <EMPTY>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void collection_member_expression()           : {/*@bgen(jjtree) MEMBEROF */
  MQLMEMBEROF jjtn000 = new MQLMEMBEROF(this, JJTMEMBEROF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) MEMBEROF */
        try {
/*@egen*/
	(LOOKAHEAD(path()) path() | input_parameter() | path_component())
	[<NOT> { jjtn000.not = true; }] <MEMBER> [<OF>] path()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void exists_expression()         : {/*@bgen(jjtree) EXISTS */
  MQLEXISTS jjtn000 = new MQLEXISTS(this, JJTEXISTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) EXISTS */
        try {
/*@egen*/
	[<NOT> { jjtn000.not = true; }] <EXISTS> "(" subquery() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void all_or_any_expression() : { }
{
	any_expression() | some_expression() | all_expression()
}


void any_expression()      : {/*@bgen(jjtree) ANY */
  MQLANY jjtn000 = new MQLANY(this, JJTANY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) ANY */
        try {
/*@egen*/
	<ANY> "(" subquery() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void some_expression()      : {/*@bgen(jjtree) ANY */
  MQLANY jjtn000 = new MQLANY(this, JJTANY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) ANY */
        try {
/*@egen*/
	// SOME and ANY are synonymous
	<SOME> "(" subquery() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void all_expression()      : {/*@bgen(jjtree) ALL */
  MQLALL jjtn000 = new MQLALL(this, JJTALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) ALL */
        try {
/*@egen*/
	<ALL> "(" subquery() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void comparison_expression() : { }
{
	// comparison_expression ::= string_value comparison_operator {string_expression | all_or_any_expression} | boolean_value { =|<>} {boolean_expression | all_or_any_expression} | datetime_primary comparison_operator {datetime_expression | all_or_any_expression} | entity_bean_value { = | <> } {entity_bean_expression | all_or_any_expression} | arithmetic_value comparison_operator {arithmetic_expression | all_or_any_expression

	LOOKAHEAD(arithmetic_comp()) arithmetic_comp() |
	LOOKAHEAD(string_comp()) string_comp() |
	LOOKAHEAD(boolean_comp()) boolean_comp() |
	LOOKAHEAD(enum_comp()) enum_comp() |
	LOOKAHEAD(datetime_comp()) datetime_comp() |
	LOOKAHEAD(entity_comp()) entity_comp()
}


void string_comp() : { }
{
	string_expression() (
		(<EQ>/*@bgen(jjtree) #EQUALS( 2) */
                      {
                        MQLEQUALS jjtn001 = new MQLEQUALS(this, JJTEQUALS);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                      }
                      try {
/*@egen*/ (string_expression()|all_or_any_expression())/*@bgen(jjtree)*/
                      } catch (Throwable jjte001) {
                        if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          throw (RuntimeException)jjte001;
                        }
                        if (jjte001 instanceof ParseException) {
                          throw (ParseException)jjte001;
                        }
                        throw (Error)jjte001;
                      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  2);
                        }
                      }
/*@egen*/           )
		| (<NE>/*@bgen(jjtree) #NOTEQUALS( 2) */
                        {
                          MQLNOTEQUALS jjtn002 = new MQLNOTEQUALS(this, JJTNOTEQUALS);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
                        }
                        try {
/*@egen*/ (string_expression()|all_or_any_expression())/*@bgen(jjtree)*/
                        } catch (Throwable jjte002) {
                          if (jjtc002) {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte002 instanceof RuntimeException) {
                            throw (RuntimeException)jjte002;
                          }
                          if (jjte002 instanceof ParseException) {
                            throw (ParseException)jjte002;
                          }
                          throw (Error)jjte002;
                        } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002,  2);
                          }
                        }
/*@egen*/              )
		| (<GT>/*@bgen(jjtree) #GREATERTHAN( 2) */
                        {
                          MQLGREATERTHAN jjtn003 = new MQLGREATERTHAN(this, JJTGREATERTHAN);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
                        }
                        try {
/*@egen*/ (string_expression() | all_or_any_expression())/*@bgen(jjtree)*/
                        } catch (Throwable jjte003) {
                          if (jjtc003) {
                            jjtree.clearNodeScope(jjtn003);
                            jjtc003 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte003 instanceof RuntimeException) {
                            throw (RuntimeException)jjte003;
                          }
                          if (jjte003 instanceof ParseException) {
                            throw (ParseException)jjte003;
                          }
                          throw (Error)jjte003;
                        } finally {
                          if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003,  2);
                          }
                        }
/*@egen*/                )
		| (<GE>/*@bgen(jjtree) #GREATEROREQUAL( 2) */
                        {
                          MQLGREATEROREQUAL jjtn004 = new MQLGREATEROREQUAL(this, JJTGREATEROREQUAL);
                          boolean jjtc004 = true;
                          jjtree.openNodeScope(jjtn004);
                        }
                        try {
/*@egen*/ (string_expression() | all_or_any_expression())/*@bgen(jjtree)*/
                        } catch (Throwable jjte004) {
                          if (jjtc004) {
                            jjtree.clearNodeScope(jjtn004);
                            jjtc004 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte004 instanceof RuntimeException) {
                            throw (RuntimeException)jjte004;
                          }
                          if (jjte004 instanceof ParseException) {
                            throw (ParseException)jjte004;
                          }
                          throw (Error)jjte004;
                        } finally {
                          if (jjtc004) {
                            jjtree.closeNodeScope(jjtn004,  2);
                          }
                        }
/*@egen*/                   )
		| (<LT>/*@bgen(jjtree) #LESSTHAN( 2) */
                        {
                          MQLLESSTHAN jjtn005 = new MQLLESSTHAN(this, JJTLESSTHAN);
                          boolean jjtc005 = true;
                          jjtree.openNodeScope(jjtn005);
                        }
                        try {
/*@egen*/ (string_expression() | all_or_any_expression())/*@bgen(jjtree)*/
                        } catch (Throwable jjte005) {
                          if (jjtc005) {
                            jjtree.clearNodeScope(jjtn005);
                            jjtc005 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte005 instanceof RuntimeException) {
                            throw (RuntimeException)jjte005;
                          }
                          if (jjte005 instanceof ParseException) {
                            throw (ParseException)jjte005;
                          }
                          throw (Error)jjte005;
                        } finally {
                          if (jjtc005) {
                            jjtree.closeNodeScope(jjtn005,  2);
                          }
                        }
/*@egen*/             )
		| (<LE>/*@bgen(jjtree) #LESSOREQUAL( 2) */
                        {
                          MQLLESSOREQUAL jjtn006 = new MQLLESSOREQUAL(this, JJTLESSOREQUAL);
                          boolean jjtc006 = true;
                          jjtree.openNodeScope(jjtn006);
                        }
                        try {
/*@egen*/ (string_expression() | all_or_any_expression())/*@bgen(jjtree)*/
                        } catch (Throwable jjte006) {
                          if (jjtc006) {
                            jjtree.clearNodeScope(jjtn006);
                            jjtc006 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte006 instanceof RuntimeException) {
                            throw (RuntimeException)jjte006;
                          }
                          if (jjte006 instanceof ParseException) {
                            throw (ParseException)jjte006;
                          }
                          throw (Error)jjte006;
                        } finally {
                          if (jjtc006) {
                            jjtree.closeNodeScope(jjtn006,  2);
                          }
                        }
/*@egen*/                )
		)
}


void boolean_comp() : { }
{
	boolean_expression() (
	(<EQ>/*@bgen(jjtree) #EQUALS( 2) */
              {
                MQLEQUALS jjtn001 = new MQLEQUALS(this, JJTEQUALS);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*/ (boolean_expression() | all_or_any_expression())/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                }
              }
/*@egen*/           )
	| (<NE>/*@bgen(jjtree) #NOTEQUALS( 2) */
                {
                  MQLNOTEQUALS jjtn002 = new MQLNOTEQUALS(this, JJTNOTEQUALS);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*/ (boolean_expression() | all_or_any_expression())/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                  }
                }
/*@egen*/              )
	)
}

void enum_comp() : { }
{
	enum_expression() (
	(<EQ>/*@bgen(jjtree) #EQUALS( 2) */
              {
                MQLEQUALS jjtn001 = new MQLEQUALS(this, JJTEQUALS);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*/ (enum_expression() | all_or_any_expression())/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                }
              }
/*@egen*/           )
	| (<NE>/*@bgen(jjtree) #NOTEQUALS( 2) */
                {
                  MQLNOTEQUALS jjtn002 = new MQLNOTEQUALS(this, JJTNOTEQUALS);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*/ (enum_expression() | all_or_any_expression())/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                  }
                }
/*@egen*/              )
	)
}

void entity_comp() : { }
{
	entity_bean_expression() (
	(<EQ> (/*@bgen(jjtree) #EQUALS( 2) */
               {
                 MQLEQUALS jjtn001 = new MQLEQUALS(this, JJTEQUALS);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*/(LOOKAHEAD(all_or_any_expression()) all_or_any_expression() | entity_bean_expression())/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  2);
                 }
               }
/*@egen*/           ))
	| (<NE> (/*@bgen(jjtree) #NOTEQUALS( 2) */
                 {
                   MQLNOTEQUALS jjtn002 = new MQLNOTEQUALS(this, JJTNOTEQUALS);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                 }
                 try {
/*@egen*/(LOOKAHEAD(all_or_any_expression()) all_or_any_expression() | entity_bean_expression())/*@bgen(jjtree)*/
                 } catch (Throwable jjte002) {
                   if (jjtc002) {
                     jjtree.clearNodeScope(jjtn002);
                     jjtc002 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte002 instanceof RuntimeException) {
                     throw (RuntimeException)jjte002;
                   }
                   if (jjte002 instanceof ParseException) {
                     throw (ParseException)jjte002;
                   }
                   throw (Error)jjte002;
                 } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002,  2);
                   }
                 }
/*@egen*/              ))
	)
}


void arithmetic_comp() : { }
{
	// arithmetic_value() (
	arithmetic_expression() (
	(<EQ>/*@bgen(jjtree) #EQUALS( 2) */
              {
                MQLEQUALS jjtn001 = new MQLEQUALS(this, JJTEQUALS);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*/ (arithmetic_expression() | all_or_any_expression())/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                }
              }
/*@egen*/           )
	| (<GT>/*@bgen(jjtree) #GREATERTHAN( 2) */
                {
                  MQLGREATERTHAN jjtn002 = new MQLGREATERTHAN(this, JJTGREATERTHAN);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*/ (arithmetic_expression() | all_or_any_expression())/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                  }
                }
/*@egen*/                )
	| (<GE>/*@bgen(jjtree) #GREATEROREQUAL( 2) */
                {
                  MQLGREATEROREQUAL jjtn003 = new MQLGREATEROREQUAL(this, JJTGREATEROREQUAL);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
                }
                try {
/*@egen*/ (arithmetic_expression() | all_or_any_expression())/*@bgen(jjtree)*/
                } catch (Throwable jjte003) {
                  if (jjtc003) {
                    jjtree.clearNodeScope(jjtn003);
                    jjtc003 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte003 instanceof RuntimeException) {
                    throw (RuntimeException)jjte003;
                  }
                  if (jjte003 instanceof ParseException) {
                    throw (ParseException)jjte003;
                  }
                  throw (Error)jjte003;
                } finally {
                  if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003,  2);
                  }
                }
/*@egen*/                   )
	| (<LT>/*@bgen(jjtree) #LESSTHAN( 2) */
                {
                  MQLLESSTHAN jjtn004 = new MQLLESSTHAN(this, JJTLESSTHAN);
                  boolean jjtc004 = true;
                  jjtree.openNodeScope(jjtn004);
                }
                try {
/*@egen*/ (arithmetic_expression() | all_or_any_expression())/*@bgen(jjtree)*/
                } catch (Throwable jjte004) {
                  if (jjtc004) {
                    jjtree.clearNodeScope(jjtn004);
                    jjtc004 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte004 instanceof RuntimeException) {
                    throw (RuntimeException)jjte004;
                  }
                  if (jjte004 instanceof ParseException) {
                    throw (ParseException)jjte004;
                  }
                  throw (Error)jjte004;
                } finally {
                  if (jjtc004) {
                    jjtree.closeNodeScope(jjtn004,  2);
                  }
                }
/*@egen*/             )
	| (<LE>/*@bgen(jjtree) #LESSOREQUAL( 2) */
                {
                  MQLLESSOREQUAL jjtn005 = new MQLLESSOREQUAL(this, JJTLESSOREQUAL);
                  boolean jjtc005 = true;
                  jjtree.openNodeScope(jjtn005);
                }
                try {
/*@egen*/ (arithmetic_expression() | all_or_any_expression())/*@bgen(jjtree)*/
                } catch (Throwable jjte005) {
                  if (jjtc005) {
                    jjtree.clearNodeScope(jjtn005);
                    jjtc005 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte005 instanceof RuntimeException) {
                    throw (RuntimeException)jjte005;
                  }
                  if (jjte005 instanceof ParseException) {
                    throw (ParseException)jjte005;
                  }
                  throw (Error)jjte005;
                } finally {
                  if (jjtc005) {
                    jjtree.closeNodeScope(jjtn005,  2);
                  }
                }
/*@egen*/                )
	| (<NE>/*@bgen(jjtree) #NOTEQUALS( 2) */
                {
                  MQLNOTEQUALS jjtn006 = new MQLNOTEQUALS(this, JJTNOTEQUALS);
                  boolean jjtc006 = true;
                  jjtree.openNodeScope(jjtn006);
                }
                try {
/*@egen*/ (arithmetic_expression() | all_or_any_expression())/*@bgen(jjtree)*/
                } catch (Throwable jjte006) {
                  if (jjtc006) {
                    jjtree.clearNodeScope(jjtn006);
                    jjtc006 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte006 instanceof RuntimeException) {
                    throw (RuntimeException)jjte006;
                  }
                  if (jjte006 instanceof ParseException) {
                    throw (ParseException)jjte006;
                  }
                  throw (Error)jjte006;
                } finally {
                  if (jjtc006) {
                    jjtree.closeNodeScope(jjtn006,  2);
                  }
                }
/*@egen*/              )
	)
}


void datetime_comp() : { }
{
	datetime_expression() (
	(<EQ>/*@bgen(jjtree) #EQUALS( 2) */
              {
                MQLEQUALS jjtn001 = new MQLEQUALS(this, JJTEQUALS);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*/ (datetime_expression() | all_or_any_expression())/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                }
              }
/*@egen*/           )
	| (<GT>/*@bgen(jjtree) #GREATERTHAN( 2) */
                {
                  MQLGREATERTHAN jjtn002 = new MQLGREATERTHAN(this, JJTGREATERTHAN);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*/ (datetime_expression() | all_or_any_expression())/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                  }
                }
/*@egen*/                )
	| (<GE>/*@bgen(jjtree) #GREATEROREQUAL( 2) */
                {
                  MQLGREATEROREQUAL jjtn003 = new MQLGREATEROREQUAL(this, JJTGREATEROREQUAL);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
                }
                try {
/*@egen*/ (datetime_expression() | all_or_any_expression())/*@bgen(jjtree)*/
                } catch (Throwable jjte003) {
                  if (jjtc003) {
                    jjtree.clearNodeScope(jjtn003);
                    jjtc003 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte003 instanceof RuntimeException) {
                    throw (RuntimeException)jjte003;
                  }
                  if (jjte003 instanceof ParseException) {
                    throw (ParseException)jjte003;
                  }
                  throw (Error)jjte003;
                } finally {
                  if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003,  2);
                  }
                }
/*@egen*/                   )
	| (<LT>/*@bgen(jjtree) #LESSTHAN( 2) */
                {
                  MQLLESSTHAN jjtn004 = new MQLLESSTHAN(this, JJTLESSTHAN);
                  boolean jjtc004 = true;
                  jjtree.openNodeScope(jjtn004);
                }
                try {
/*@egen*/ (datetime_expression() | all_or_any_expression())/*@bgen(jjtree)*/
                } catch (Throwable jjte004) {
                  if (jjtc004) {
                    jjtree.clearNodeScope(jjtn004);
                    jjtc004 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte004 instanceof RuntimeException) {
                    throw (RuntimeException)jjte004;
                  }
                  if (jjte004 instanceof ParseException) {
                    throw (ParseException)jjte004;
                  }
                  throw (Error)jjte004;
                } finally {
                  if (jjtc004) {
                    jjtree.closeNodeScope(jjtn004,  2);
                  }
                }
/*@egen*/             )
	| (<LE>/*@bgen(jjtree) #LESSOREQUAL( 2) */
                {
                  MQLLESSOREQUAL jjtn005 = new MQLLESSOREQUAL(this, JJTLESSOREQUAL);
                  boolean jjtc005 = true;
                  jjtree.openNodeScope(jjtn005);
                }
                try {
/*@egen*/ (datetime_expression() | all_or_any_expression())/*@bgen(jjtree)*/
                } catch (Throwable jjte005) {
                  if (jjtc005) {
                    jjtree.clearNodeScope(jjtn005);
                    jjtc005 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte005 instanceof RuntimeException) {
                    throw (RuntimeException)jjte005;
                  }
                  if (jjte005 instanceof ParseException) {
                    throw (ParseException)jjte005;
                  }
                  throw (Error)jjte005;
                } finally {
                  if (jjtc005) {
                    jjtree.closeNodeScope(jjtn005,  2);
                  }
                }
/*@egen*/                )
	| (<NE>/*@bgen(jjtree) #NOTEQUALS( 2) */
                {
                  MQLNOTEQUALS jjtn006 = new MQLNOTEQUALS(this, JJTNOTEQUALS);
                  boolean jjtc006 = true;
                  jjtree.openNodeScope(jjtn006);
                }
                try {
/*@egen*/ (datetime_expression() | all_or_any_expression())/*@bgen(jjtree)*/
                } catch (Throwable jjte006) {
                  if (jjtc006) {
                    jjtree.clearNodeScope(jjtn006);
                    jjtc006 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte006 instanceof RuntimeException) {
                    throw (RuntimeException)jjte006;
                  }
                  if (jjte006 instanceof ParseException) {
                    throw (ParseException)jjte006;
                  }
                  throw (Error)jjte006;
                } finally {
                  if (jjtc006) {
                    jjtree.closeNodeScope(jjtn006,  2);
                  }
                }
/*@egen*/              )
	)
}

void scalar_function() : { }
{
    functions_returning_numerics()
        | functions_returning_datetime()
        | functions_returning_strings()
}

void arithmetic_value() : { }
{
	path() | functions_returning_numerics() | "(" subquery() ")"
}


/* changed to eliminate left recursion */
void arithmetic_expression() : { }
{
	arithmetic_term()
		((<PLUS>/*@bgen(jjtree) #ADD( 2) */
                         {
                           MQLADD jjtn001 = new MQLADD(this, JJTADD);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                         }
                         try {
/*@egen*/ arithmetic_expression()/*@bgen(jjtree)*/
                         } catch (Throwable jjte001) {
                           if (jjtc001) {
                             jjtree.clearNodeScope(jjtn001);
                             jjtc001 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte001 instanceof RuntimeException) {
                             throw (RuntimeException)jjte001;
                           }
                           if (jjte001 instanceof ParseException) {
                             throw (ParseException)jjte001;
                           }
                           throw (Error)jjte001;
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  2);
                           }
                         }
/*@egen*/        )
		| (<MINUS>/*@bgen(jjtree) #SUBTRACT( 2) */
                           {
                             MQLSUBTRACT jjtn002 = new MQLSUBTRACT(this, JJTSUBTRACT);
                             boolean jjtc002 = true;
                             jjtree.openNodeScope(jjtn002);
                           }
                           try {
/*@egen*/ arithmetic_expression()/*@bgen(jjtree)*/
                           } catch (Throwable jjte002) {
                             if (jjtc002) {
                               jjtree.clearNodeScope(jjtn002);
                               jjtc002 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte002 instanceof RuntimeException) {
                               throw (RuntimeException)jjte002;
                             }
                             if (jjte002 instanceof ParseException) {
                               throw (ParseException)jjte002;
                             }
                             throw (Error)jjte002;
                           } finally {
                             if (jjtc002) {
                               jjtree.closeNodeScope(jjtn002,  2);
                             }
                           }
/*@egen*/             ))*
}


/* changed to eliminate left recursion */
void arithmetic_term() : { }
{
	arithmetic_factor()
		((<TIMES>/*@bgen(jjtree) #MULTIPLY( 2) */
                          {
                            MQLMULTIPLY jjtn001 = new MQLMULTIPLY(this, JJTMULTIPLY);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                          }
                          try {
/*@egen*/ arithmetic_term()/*@bgen(jjtree)*/
                          } catch (Throwable jjte001) {
                            if (jjtc001) {
                              jjtree.clearNodeScope(jjtn001);
                              jjtc001 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                              throw (RuntimeException)jjte001;
                            }
                            if (jjte001 instanceof ParseException) {
                              throw (ParseException)jjte001;
                            }
                            throw (Error)jjte001;
                          } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001,  2);
                            }
                          }
/*@egen*/             )
		| (<DIV>/*@bgen(jjtree) #DIVIDE( 2) */
                         {
                           MQLDIVIDE jjtn002 = new MQLDIVIDE(this, JJTDIVIDE);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
                         }
                         try {
/*@egen*/ arithmetic_term()/*@bgen(jjtree)*/
                         } catch (Throwable jjte002) {
                           if (jjtc002) {
                             jjtree.clearNodeScope(jjtn002);
                             jjtc002 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte002 instanceof RuntimeException) {
                             throw (RuntimeException)jjte002;
                           }
                           if (jjte002 instanceof ParseException) {
                             throw (ParseException)jjte002;
                           }
                           throw (Error)jjte002;
                         } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002,  2);
                           }
                         }
/*@egen*/           ))*
}


void arithmetic_factor() : { }
{
	numeric_literal() |
	input_parameter() |
	path() |
	LOOKAHEAD(2) "(" arithmetic_expression() ")" |
	functions_returning_numerics() |
	aggregate_select_expression() |
	subquery()
}


void negative()           : {/*@bgen(jjtree) NEGATIVE */
  MQLNEGATIVE jjtn000 = new MQLNEGATIVE(this, JJTNEGATIVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) NEGATIVE */
        try {
/*@egen*/
	<MINUS>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void string_value() : { }
{
	path() | functions_returning_strings() | "(" subquery() ")"
}


void string_expression() : { }
{
	input_parameter() | string_primary()
}


void string_primary() : { }
{
	string_literal() | path() | LOOKAHEAD(2) "(" string_expression() ")" |
	functions_returning_strings() | LOOKAHEAD(2)  "(" subquery() ")"
}


void datetime_expression() : { }
{
	datetime_primary() | "(" subquery() ")"
}


void datetime_primary() : { }
{
	path() | functions_returning_datetime() | input_parameter()
}


void boolean_value() : { }
{
	path() | "(" subquery() ")"
}


void boolean_expression() : { }
{
	boolean_primary() | "(" subquery() ")"
}


void boolean_primary() : { }
{
	LOOKAHEAD(2) path() | boolean_literal() | input_parameter()
}


void enum_expression() : { }
{
	enum_primary() | "(" subquery() ")"
}


void enum_primary() : { }
{
	LOOKAHEAD(2) path()
	| LOOKAHEAD(enum_literal()) enum_literal()
	| LOOKAHEAD(input_parameter()) input_parameter()
}


void enum_literal() : { }
{
	{ inEnumPath = true; }
	path()
	{ inEnumPath = false; }
}


void entity_bean_value() : { }
{
	LOOKAHEAD(path()) path() | path_component()
}


void entity_bean_expression() : { }
{
	input_parameter() | entity_bean_value()
}


void functions_returning_strings() : { }
{
	concat() | substring() | trim() | lower() | upper()
}


void concat()         : {/*@bgen(jjtree) CONCAT */
  MQLCONCAT jjtn000 = new MQLCONCAT(this, JJTCONCAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) CONCAT */
        try {
/*@egen*/
	<CONCAT> "(" string_expression() <COMMA> string_expression() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void substring()            : {/*@bgen(jjtree) SUBSTRING */
  MQLSUBSTRING jjtn000 = new MQLSUBSTRING(this, JJTSUBSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) SUBSTRING */
        try {
/*@egen*/
	<SUBSTRING> "(" string_expression() <COMMA> arithmetic_expression() <COMMA> arithmetic_expression() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void trim()       : {/*@bgen(jjtree) TRIM */
  MQLTRIM jjtn000 = new MQLTRIM(this, JJTTRIM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) TRIM */
        try {
/*@egen*/
	<TRIM> "(" [LOOKAHEAD(2)[trim_specification()] [trim_character()] <FROM>]
		string_expression() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void lower()        : {/*@bgen(jjtree) LOWER */
  MQLLOWER jjtn000 = new MQLLOWER(this, JJTLOWER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) LOWER */
        try {
/*@egen*/
	<LOWER> "(" string_expression() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void upper()        : {/*@bgen(jjtree) UPPER */
  MQLUPPER jjtn000 = new MQLUPPER(this, JJTUPPER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) UPPER */
        try {
/*@egen*/
	<UPPER> "(" string_expression() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



void trim_specification() : { }
{
	LOOKAHEAD(2) (/*@bgen(jjtree) TRIMLEADING */
                      {
                        MQLTRIMLEADING jjtn001 = new MQLTRIMLEADING(this, JJTTRIMLEADING);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                      }
                      try {
/*@egen*/<LEADING>/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001, true);
                        }
                      }
/*@egen*/             ) | (/*@bgen(jjtree) TRIMTRAILING */
                                                 {
                                                   MQLTRIMTRAILING jjtn002 = new MQLTRIMTRAILING(this, JJTTRIMTRAILING);
                                                   boolean jjtc002 = true;
                                                   jjtree.openNodeScope(jjtn002);
                                                 }
                                                 try {
/*@egen*/<TRAILING>/*@bgen(jjtree)*/
                                                 } finally {
                                                   if (jjtc002) {
                                                     jjtree.closeNodeScope(jjtn002, true);
                                                   }
                                                 }
/*@egen*/              ) | (/*@bgen(jjtree) TRIMBOTH */
                                                                              {
                                                                                MQLTRIMBOTH jjtn003 = new MQLTRIMBOTH(this, JJTTRIMBOTH);
                                                                                boolean jjtc003 = true;
                                                                                jjtree.openNodeScope(jjtn003);
                                                                              }
                                                                              try {
/*@egen*/<BOTH>/*@bgen(jjtree)*/
                                                                              } finally {
                                                                                if (jjtc003) {
                                                                                  jjtree.closeNodeScope(jjtn003, true);
                                                                                }
                                                                              }
/*@egen*/          )
}


void functions_returning_numerics() : { }
{
	length() | locate() | abs() | sqrt() | mod() | size()
}


void length()         : {/*@bgen(jjtree) LENGTH */
  MQLLENGTH jjtn000 = new MQLLENGTH(this, JJTLENGTH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) LENGTH */
        try {
/*@egen*/
	<LENGTH> "(" string_expression() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}


void locate()         : {/*@bgen(jjtree) LOCATE */
  MQLLOCATE jjtn000 = new MQLLOCATE(this, JJTLOCATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) LOCATE */
        try {
/*@egen*/
	<LOCATE> "(" string_expression() <COMMA> string_expression()
		[<COMMA> arithmetic_expression()] ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}


void abs()      : {/*@bgen(jjtree) ABS */
  MQLABS jjtn000 = new MQLABS(this, JJTABS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) ABS */
        try {
/*@egen*/
	<ABS> "(" arithmetic_expression() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}


void sqrt()       : {/*@bgen(jjtree) SQRT */
  MQLSQRT jjtn000 = new MQLSQRT(this, JJTSQRT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) SQRT */
        try {
/*@egen*/
	<SQRT> "(" arithmetic_expression() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}


void mod()      : {/*@bgen(jjtree) MOD */
  MQLMOD jjtn000 = new MQLMOD(this, JJTMOD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) MOD */
        try {
/*@egen*/
	<MOD> "(" arithmetic_expression() <COMMA> arithmetic_expression() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}


void size()       : {/*@bgen(jjtree) SIZE */
  MQLSIZE jjtn000 = new MQLSIZE(this, JJTSIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) SIZE */
        try {
/*@egen*/
	<SIZE> "(" path() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void functions_returning_datetime() : { }
{
	(/*@bgen(jjtree) CURRENTDATE */
         {
           MQLCURRENTDATE jjtn001 = new MQLCURRENTDATE(this, JJTCURRENTDATE);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
         }
         try {
/*@egen*/<CURRENT_DATE>/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
           }
         }
/*@egen*/             )
	| (/*@bgen(jjtree) CURRENTTIME */
           {
             MQLCURRENTTIME jjtn002 = new MQLCURRENTTIME(this, JJTCURRENTTIME);
             boolean jjtc002 = true;
             jjtree.openNodeScope(jjtn002);
           }
           try {
/*@egen*/<CURRENT_TIME>/*@bgen(jjtree)*/
           } finally {
             if (jjtc002) {
               jjtree.closeNodeScope(jjtn002, true);
             }
           }
/*@egen*/             )
	| (/*@bgen(jjtree) CURRENTTIMESTAMP */
           {
             MQLCURRENTTIMESTAMP jjtn003 = new MQLCURRENTTIMESTAMP(this, JJTCURRENTTIMESTAMP);
             boolean jjtc003 = true;
             jjtree.openNodeScope(jjtn003);
           }
           try {
/*@egen*/<CURRENT_TIMESTAMP>/*@bgen(jjtree)*/
           } finally {
             if (jjtc003) {
               jjtree.closeNodeScope(jjtn003, true);
             }
           }
/*@egen*/                  )
}


void limit_clause()        : {/*@bgen(jjtree) LIMIT */
  MQLLIMIT jjtn000 = new MQLLIMIT(this, JJTLIMIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) LIMIT */
        try {
/*@egen*/
	<LIMIT> integer_literal()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 

}

void skip_clause()          : {/*@bgen(jjtree) SKIPPER */
  MQLSKIPPER jjtn000 = new MQLSKIPPER(this, JJTSKIPPER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) SKIPPER */
        try {
/*@egen*/
	<SKIPPER> integer_literal()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}

void orderby_clause()          : {/*@bgen(jjtree) ORDERBY */
  MQLORDERBY jjtn000 = new MQLORDERBY(this, JJTORDERBY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) ORDERBY */
        try {
/*@egen*/
	<ORDER> <BY> orderby_item() (<COMMA> orderby_item())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void orderby_item()              : {/*@bgen(jjtree) ORDERBYITEM */
  MQLORDERBYITEM jjtn000 = new MQLORDERBYITEM(this, JJTORDERBYITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) ORDERBYITEM */
        try {
/*@egen*/
	(LOOKAHEAD(path()) path() | orderby_extension())
	    [/*@bgen(jjtree) ASCENDING */
              {
                MQLASCENDING jjtn001 = new MQLASCENDING(this, JJTASCENDING);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*/ <ASC>/*@bgen(jjtree)*/
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                }
              }
/*@egen*/            |/*@bgen(jjtree) DESCENDING */
                                 {
                                   MQLDESCENDING jjtn002 = new MQLDESCENDING(this, JJTDESCENDING);
                                   boolean jjtc002 = true;
                                   jjtree.openNodeScope(jjtn002);
                                 }
                                 try {
/*@egen*/ <DESC>/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc002) {
                                     jjtree.closeNodeScope(jjtn002, true);
                                   }
                                 }
/*@egen*/             ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void orderby_extension()                   : {/*@bgen(jjtree) ORDERBYEXTENSION */
  MQLORDERBYEXTENSION jjtn000 = new MQLORDERBYEXTENSION(this, JJTORDERBYEXTENSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) ORDERBYEXTENSION */
    try {
/*@egen*/
    aggregate_select_expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void abstract_schema_name()                     : {/*@bgen(jjtree) ABSTRACTSCHEMANAME */
  MQLABSTRACTSCHEMANAME jjtn000 = new MQLABSTRACTSCHEMANAME(this, JJTABSTRACTSCHEMANAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) ABSTRACTSCHEMANAME */
        try {
/*@egen*/
	path_component() (<DOT> path_component())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void tok()      :
{/*@bgen(jjtree) TOK */
  MQLTOK jjtn000 = new MQLTOK(this, JJTTOK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) TOK */
        try {
/*@egen*/
	t = <IDENTIFIER>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ { jjtn000.setToken (t); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void identification_variable()             :
{/*@bgen(jjtree) IDENTIFIER */
  MQLIDENTIFIER jjtn000 = new MQLIDENTIFIER(this, JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) IDENTIFIER */
        try {
/*@egen*/
	t = <IDENTIFIER>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ { jjtn000.setToken (t); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void path_component()                         :
{/*@bgen(jjtree) IDENTIFICATIONVARIABLE */
  MQLIDENTIFICATIONVARIABLE jjtn000 = new MQLIDENTIFICATIONVARIABLE(this, JJTIDENTIFICATIONVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) IDENTIFICATIONVARIABLE */
        try {
/*@egen*/
	// unlike the identifier(), the path_component() *can* be a
	// reserved word. E.g., Order.group.length is a perfectly
	// valid path expression
	(
	t = <NEW>
	| t = <ALL>
	| t = <ANY>
	| t = <EXISTS>
	| t = <SOME>
	| t = <EMPTY>
	| t = <ASC>
	| t = <DESC>
	| t = <ORDER>
	| t = <IS>
	| t = <MEMBER>
	| t = <OF>
	| t = <LIKE>
	| t = <ESCAPE>
	| t = <BETWEEN>
	| t = <NULL>
	| t = <AVG>
	| t = <MIN>
	| t = <MAX>
	| t = <SUM>
	| t = <COUNT>
	| t = <OR>
	| t = <AND>
	| t = <NOT>
	| t = <CONCAT>
	| t = <SUBSTRING>
	| t = <TRIM>
	| t = <LOWER>
	| t = <UPPER>
	| t = <LEADING>
	| t = <TRAILING>
	| t = <BOTH>
	| t = <LENGTH>
	| t = <LOCATE>
	| t = <ABS>
	| t = <SQRT>
	| t = <MOD>
	| t = <SIZE>
	| t = <CURRENT_DATE>
	| t = <CURRENT_TIME>
	| t = <CURRENT_TIMESTAMP>
	| t = <SELECT>
	| t = <DISTINCT>
	| t = <FROM>
	| t = <UPDATE>
	| t = <DELETE>
	| t = <WHERE>
	| t = <GROUP>
	| t = <BY>
	| t = <HAVING>
	| t = <AS>
	| t = <LEFT>
	| t = <OUTER>
	| t = <INNER>
	| t = <JOIN>
	| t = <FETCH>
	| t = <IN>
	| t = <SET>
	| t = <OBJECT>
	| t = <IDENTIFIER>
    )/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      }
/*@egen*/ { jjtn000.setToken (t); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void numeric_literal() : { }
{
	LOOKAHEAD(decimal_literal()) decimal_literal() | integer_literal()
}


void integer_literal()                 :
{/*@bgen(jjtree) INTEGERLITERAL */
  MQLINTEGERLITERAL jjtn000 = new MQLINTEGERLITERAL(this, JJTINTEGERLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) INTEGERLITERAL */
        try {
/*@egen*/
	[<PLUS> | negative()] t = <INTEGER_LITERAL>/*@bgen(jjtree)*/
                                                    {
                                                      jjtree.closeNodeScope(jjtn000, true);
                                                      jjtc000 = false;
                                                    }
/*@egen*/ { jjtn000.setToken (t); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void decimal_literal()                 :
{/*@bgen(jjtree) DECIMALLITERAL */
  MQLDECIMALLITERAL jjtn000 = new MQLDECIMALLITERAL(this, JJTDECIMALLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) DECIMALLITERAL */
         try {
/*@egen*/
	 [<PLUS> | negative()] t = <DECIMAL_LITERAL>/*@bgen(jjtree)*/
                                                     {
                                                       jjtree.closeNodeScope(jjtn000, true);
                                                       jjtc000 = false;
                                                     }
/*@egen*/ { jjtn000.setToken (t); }/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}


void boolean_literal()                 :
{/*@bgen(jjtree) BOOLEANLITERAL */
  MQLBOOLEANLITERAL jjtn000 = new MQLBOOLEANLITERAL(this, JJTBOOLEANLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) BOOLEANLITERAL */
        try {
/*@egen*/
	t = <BOOLEAN_LITERAL>/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ { jjtn000.setToken (t); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void string_literal()                :
{/*@bgen(jjtree) STRINGLITERAL */
  MQLSTRINGLITERAL jjtn000 = new MQLSTRINGLITERAL(this, JJTSTRINGLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) STRINGLITERAL */
        try {
/*@egen*/
	t = <STRING_LITERAL>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ { jjtn000.setToken (t); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void input_parameter() : { }
{
	named_input_parameter() | positional_input_parameter()
}


void named_input_parameter()                      :
{/*@bgen(jjtree) NAMEDINPUTPARAMETER */
  MQLNAMEDINPUTPARAMETER jjtn000 = new MQLNAMEDINPUTPARAMETER(this, JJTNAMEDINPUTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) NAMEDINPUTPARAMETER */
        try {
/*@egen*/
	":" t = <IDENTIFIER>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ { jjtn000.setToken (t); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void positional_input_parameter()                           :
{/*@bgen(jjtree) POSITIONALINPUTPARAMETER */
  MQLPOSITIONALINPUTPARAMETER jjtn000 = new MQLPOSITIONALINPUTPARAMETER(this, JJTPOSITIONALINPUTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) POSITIONALINPUTPARAMETER */
        try {
/*@egen*/
	"?" t = <INTEGER_LITERAL>/*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                  }
/*@egen*/ { jjtn000.setToken (t); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void pattern_value()               : {/*@bgen(jjtree) PATTERNVALUE */
  MQLPATTERNVALUE jjtn000 = new MQLPATTERNVALUE(this, JJTPATTERNVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) PATTERNVALUE */
        try {
/*@egen*/
	(input_parameter() | string_literal())
	[(<ESCAPE>/*@bgen(jjtree) ESCAPECHARACTER */
                   {
                     MQLESCAPECHARACTER jjtn001 = new MQLESCAPECHARACTER(this, JJTESCAPECHARACTER);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                   }
                   try {
/*@egen*/ escape_character()/*@bgen(jjtree)*/
                   } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       throw (RuntimeException)jjte001;
                     }
                     if (jjte001 instanceof ParseException) {
                       throw (ParseException)jjte001;
                     }
                     throw (Error)jjte001;
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001, true);
                     }
                   }
/*@egen*/                 )]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void escape_character()                  :
{/*@bgen(jjtree) ESCAPECHARACTER */
  MQLESCAPECHARACTER jjtn000 = new MQLESCAPECHARACTER(this, JJTESCAPECHARACTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) ESCAPECHARACTER */
        try {
/*@egen*/
	t = <STRING_LITERAL>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ { jjtn000.setToken (t); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void trim_character()                :
{/*@bgen(jjtree) TRIMCHARACTER */
  MQLTRIMCHARACTER jjtn000 = new MQLTRIMCHARACTER(this, JJTTRIMCHARACTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) TRIMCHARACTER */
        try {
/*@egen*/
	t = <STRING_LITERAL>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ { jjtn000.setToken (t); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void EQ()         : {/*@bgen(jjtree) EQUALS */
  MQLEQUALS jjtn000 = new MQLEQUALS(this, JJTEQUALS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) EQUALS */
        try {
/*@egen*/
	<EQ>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void NE()            : {/*@bgen(jjtree) NOTEQUALS */
  MQLNOTEQUALS jjtn000 = new MQLNOTEQUALS(this, JJTNOTEQUALS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) NOTEQUALS */
        try {
/*@egen*/
	<NE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void GT()              : {/*@bgen(jjtree) GREATERTHAN */
  MQLGREATERTHAN jjtn000 = new MQLGREATERTHAN(this, JJTGREATERTHAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) GREATERTHAN */
        try {
/*@egen*/
	<GT>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void GE()                 : {/*@bgen(jjtree) GREATEROREQUAL */
  MQLGREATEROREQUAL jjtn000 = new MQLGREATEROREQUAL(this, JJTGREATEROREQUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) GREATEROREQUAL */
        try {
/*@egen*/
	<GE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void LT()           : {/*@bgen(jjtree) LESSTHAN */
  MQLLESSTHAN jjtn000 = new MQLLESSTHAN(this, JJTLESSTHAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) LESSTHAN */
        try {
/*@egen*/
	<LT>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void LE()              : {/*@bgen(jjtree) LESSOREQUAL */
  MQLLESSOREQUAL jjtn000 = new MQLLESSOREQUAL(this, JJTLESSOREQUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) LESSOREQUAL */
        try {
/*@egen*/
	<LE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
